# Build package
library(roxygen2)
library(devtools)
document()
install()
# Build package
library(roxygen2)
library(devtools)
document()
install()
library(stockassessmenthelper)
?VAlignPlots
x = seq(0, 10, length.out = 200)
y1 = sin(x)
y2 = cos(x)
y3 = sin(x) * cos(x)
df1 <- data.frame(x, y1, y2)
df1 <- melt(df1, id.vars = "x")
g1 <- ggplot(df1, aes(x, value, color = variable)) + geom_line()
df2 <- data.frame(x, y3)
g2 <- ggplot(df2, aes(x, y3)) + geom_line()
g <- VAlignPlots(g1, g2, globalTitle = "Alignment test")
grid.newpage()
grid::grid.draw(g)
detach("package:stockassessmenthelper", unload = TRUE)
>
# Build package
library(roxygen2)
library(devtools)
document()
install()
library(stockassessmenthelper)
?VAlignPlots
# Build package
library(roxygen2)
library(devtools)
document()
install()
library(stockassessmenthelper)
?VAlignPlots
3
x = seq(0, 10, length.out = 200)
y1 = sin(x)
y2 = cos(x)
y3 = sin(x) * cos(x)
df1 <- data.frame(x, y1, y2)
df1 <- reshape2::melt(df1, id.vars = "x")
g1 <- ggplot2::ggplot(df1, ggplot2::aes(x, value, color = variable)) + ggplot2::geom_line()
df2 <- data.frame(x, y3)
g2 <- ggplot2::ggplot(df2, aes(x, y3)) + ggplot2::geom_line()
g <- VAlignPlots(g1, g2, globalTitle = "Alignment test")
grid::grid.newpage()
grid::grid.draw(g)
# Build package
library(roxygen2)
library(devtools)
document()
install()
3
library(stockassessmenthelper)
?VAlignPlots
x = seq(0, 10, length.out = 200)
y1 = sin(x)
y2 = cos(x)
y3 = sin(x) * cos(x)
df1 <- data.frame(x, y1, y2)
df1 <- reshape2::melt(df1, id.vars = "x")
g1 <- ggplot2::ggplot(df1, ggplot2::aes(x, value, color = variable)) + ggplot2::geom_line()
df2 <- data.frame(x, y3)
g2 <- ggplot2::ggplot(df2, ggplot2::aes(x, y3)) + ggplot2::geom_line()
g <- VAlignPlots(g1, g2, globalTitle = "Alignment test")
grid::grid.newpage()
grid::grid.draw(g)
VAlignPlots
library(stockassessmenthelper)
VAlignPlots
# Build package
library(roxygen2)
library(devtools)
document()
install()
library(stockassessmenthelper)
?VAlignPlots
VAlignPlots
x = seq(0, 10, length.out = 200)
y1 = sin(x)
y2 = cos(x)
y3 = sin(x) * cos(x)
df1 <- data.frame(x, y1, y2)
df1 <- reshape2::melt(df1, id.vars = "x")
g1 <- ggplot2::ggplot(df1, ggplot2::aes(x, value, color = variable)) + ggplot2::geom_line()
df2 <- data.frame(x, y3)
g2 <- ggplot2::ggplot(df2, ggplot2::aes(x, y3)) + ggplot2::geom_line()
g <- VAlignPlots(g1, g2, globalTitle = "Alignment test")
grid::grid.newpage()
grid::grid.draw(g)
# Build package
library(roxygen2)
library(devtools)
?install
install(dependencies = NA, build_vignettes = FALSE)
install(dependencies = FALSE, build_vignettes = FALSE)
library(casal, warn.conflicts = F)
library(stockassessmenthelper, warn.conflicts = F)
library(reshape2, warn.conflicts = F)
library(dplyr, warn.conflicts = F)
library(ggplot2, warn.conflicts = F)
library(purrr, warn.conflicts = F)
n = 150
set.seed(123)
df_year_1 = data.frame(long = rnorm(n, 140, 50), lat = rnorm(n, -43, 5), year = 2000)
df_year_2 = data.frame(long = rnorm(n, 130, 50), lat = rnorm(n, -42, 5), year = 2001)
n = 150
library(raster)
library(sp)
set.seed(123)
df_year_1 = data.frame(long = rnorm(n, 140, 50), lat = rnorm(n, -43, 5), year = 2000)
df_year_2 = data.frame(long = rnorm(n, 130, 50), lat = rnorm(n, -42, 5), year = 2001)
df = rbind(df_year_1, df_year_2)
## transform coordinates to equal area, equal distance projection
## if operating over small domain, may not be important.
unproj_args = " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0 +lon_wrap=180"
unproj <- CRS(unproj_args) #default WGS84 projection
coordinates(df) <- ~ long + lat
proj4string(df) <- unproj
## project to new coordinate system
df_proj <- spTransform(x, CRS("+init=epsg:4238"))
## project to new coordinate system
df_proj <- spTransform(df, CRS("+init=epsg:4238"))
dim(df_proj)
ylim = range(df_proj$lat)
xlim = range(df_proj$long)
ylim
xlim
## project to new coordinate system
df_proj <- spTransform(df, CRS("+init=epsg:4238"))
ylim = range(df_proj$lat)
xlim = range(df_proj$long)
raster_grid <- raster(resolution = 0.1, xmn = xlim[1], xmx = xlim[2], ymn = ylim[1], ymx = ylim[2], crs = CRS("+init=epsg:4238"))
n = 150
library(raster)
library(sp)
set.seed(123)
df_year_1 = data.frame(long = rnorm(n, 140, 50), lat = rnorm(n, -43, 5), year = 2000, catchrate = rlnorm(n, log(1.2), 0.6))
df_year_2 = data.frame(long = rnorm(n, 130, 50), lat = rnorm(n, -42, 5), year = 2001, catchrate = rlnorm(n, log(1.2), 0.6))
df = rbind(df_year_1, df_year_2)
## transform coordinates to equal area, equal distance projection
## if operating over small domain, may not be important.
unproj_args = " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0 +lon_wrap=180"
unproj <- CRS(unproj_args) #default WGS84 projection
coordinates(df) <- ~ long + lat
proj4string(df) <- unproj
## project to new coordinate system
df_proj <- spTransform(df, CRS("+init=epsg:4238"))
ylim = range(df_proj$lat)
xlim = range(df_proj$long)
raster_grid <- raster(resolution = 0.1, xmn = xlim[1], xmx = xlim[2], ymn = ylim[1], ymx = ylim[2], crs = CRS("+init=epsg:4238"))
median_catch <- rasterize(df, raster_grid, field = df$catchrate, median)
sd_catchrate <- rasterize(df, raster_grid, field = df$catchrate, sd)
## do the above fo each year
years = unique(df$year)
t = 1
## do the above fo each year
years = unique(df$year)
this_year = df[df$year == years[t], ]
# Build package
library(roxygen2)
library(devtools)
document()
library(stockassessmenthelper)
# Build package
library(roxygen2)
library(devtools)
document()
install(dependencies = FALSE, build_vignettes = FALSE)
bookdown::render_book(input = "GitBook")
getwd()
getwd()
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
set.seed(123)
n_time_steps = 10
samples_per_year = 1000
average_year_densities = c(r_lnorm(N = n_time_steps / 2, 0.4, 0.5), r_lnorm(N = n_time_steps / 2, 0.6, 0.9))
average_year_densities
set.seed(123)
n_time_steps = 10
samples_per_year = 1000
true_stock_density = c(r_lnorm(N = n_time_steps / 2, 0.4, 0.5), r_lnorm(N = n_time_steps / 2, 0.6, 0.9))
plot(1:samples_per_year, true_stock_density, xlab = "Time", ylab = "True stock density", type = "l", lwd = 3)
samples_per_year
use_github_actions()
usethis::use_github_actions()
set.seed(123)
n_time_steps = 10
samples_per_year = 1000
true_stock_density = c(rlnorm(n = n_time_steps / 2, 0.4, 0.5), r_lnorm(n = n_time_steps / 2, 0.6, 0.9))
plot(1:n_time_steps, true_stock_density, xlab = "Time", ylab = "True stock density", type = "l", lwd = 3)
set.seed(123)
n_time_steps = 10
samples_per_year = 1000
true_stock_density = c(rlnorm(n = n_time_steps / 2, 0.4, 0.5), rlnorm(n = n_time_steps / 2, 0.6, 0.9))
plot(1:n_time_steps, true_stock_density, xlab = "Time", ylab = "True stock density", type = "l", lwd = 3)
library(devtools)
document()
document()
document()
check()
check()
check()
document()
check()
check()
gm_mean
?optimHess
optimHess
rnorm
log
?log
?mean
max
?max
?abs
chol
proj4string
sp:::proj4string
document()
check)()
check()
check()
?coordinates
check()
document()
document()
document()
check()
library(devtools)
check()
check()
which.min
check()
solve
check()
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
check()
rm(list = c("general_surplus_production_model_sigma", "project_SPM", "simulate_SPM", "surplus_production_millar", "surplus_production_model_re_parameterised", "surplus_production_model_sigma", "theta_logistic", "theta_logistic_q"))
check()
rlnorm
mean
mean
check()
mean
median
log
?log
sd
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
sqrt
log
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
document()
rm(list = c("general_surplus_production_model_sigma", "project_SPM", "simulate_SPM", "surplus_production_millar", "surplus_production_model_re_parameterised", "surplus_production_model_sigma", "theta_logistic", "theta_logistic_q"))
check()
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
source('C:/Software/stockassessmenthelper/R/surplus_production_funs.R')
document()
rm(list = c("general_surplus_production_model_sigma", "project_SPM", "simulate_SPM", "surplus_production_millar", "surplus_production_model_re_parameterised", "surplus_production_model_sigma", "theta_logistic", "theta_logistic_q"))
document()
check()
check()
check()
check()
?remotes::install_github
library(stockassessmenthelper)
version
packageVersion
packageVersion("stockassessmenthelper")
library(stockassessmenthelper)
?lognormal_CI
library(stockassessmenthelper)
library(help="stockassessmenthelper")
usethis::use_github_actions()
usethis::use_github_action_check_full()
?usethis::use_github_action_check_full
usethis::use_github_action_check_full(save_as = "full_check.yml")
usethis::test_coverage
usethis::test_coverage()
test_coverage
install.packages("covr")
library(covr)
# If run with no arguments implicitly calls `package_coverage()`
report()
package_coverage()
?package_coverage()
getwd*()
getwd*()
getwd()
library(stockassessmenthelper)
library(stockassessmenthelper)
packageVersion("stockassessmenthelper")
stockassessmenthelper
stockassessmenthelper:::logis_sel()
stockassessmenthelper:::logis_sel
