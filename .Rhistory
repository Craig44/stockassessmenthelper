head(cbind(p_success, p_fail, 1 - p_success))
##
r = var^2 / (var - mu) ## number of failures until the experiment stops
n = mu * (p_success / p_fail)
summary(r)
summary(p_fail)
## simulates the number of failures which occur in a sequence of Bernoulli trials before a target number of successes is reached
y_sim = rnbinom(n_sim, size = phi, mu = mu)
## compare with R
sum(dnbinom(y_sim, size = phi, mu = mu, log = T))
sum(dnbinom(y_sim, size = n, prob = prob, log = T))
sum(dnbinom(y_sim, size = n, prob = p_fail, log = T))
sum(dnbinom(y_sim, size = n, prob = p_success, log = T))
## Calculate the densities the two ways
sum(dnbinom(y_sim, size = phi, mu = mu, log = T))
sum(dnbinom(y_sim, size = n, prob = p_success, log = T))
p_success
1 - p_fail
head(cbind(p_success, p_fail, 1 - p_success))
set.seed(123)
## generate nbinomial draw
n_sim = 100
phi = 1 # 0 implies poisson no overdispersion
mu = rlnorm(n_sim, log(5), 0.4)
var = mu + (mu^2/phi)
p_success = phi/(phi+mu)  ## probability of success in each trial.
p_fail = (var - mu) / var ## probability of failure in each trial.
head(cbind(p_success, p_fail, 1 - p_success))
##
p_fail
p_success
p_success + p_failure
p_success + p_fail
?dnbinom
set.seed(123)
## generate nbinomial draw
n_sim = 100
phi = 1 # 0 implies poisson no overdispersion
mu = rlnorm(n_sim, log(5), 0.4)
var = mu + (mu^2/phi)
p_success = phi/(phi+mu)  ## probability of success in each trial.
p_fail = (var - mu) / var ## probability of failure in each trial.
head(cbind(p_success, p_fail, 1 - p_success))
##
r = mu^2 / (var - mu) ## number of failures until the experiment stops
n = mu * (p_success / p_fail)
summary(r)
summary(p_fail)
## simulates the number of failures which occur in a sequence of Bernoulli
## trials before a target number of successes is reached
y_sim = rnbinom(n_sim, size = phi, mu = mu)
## Calculate the densities the two ways
sum(dnbinom(y_sim, size = phi, mu = mu, log = T))
sum(dnbinom(y_sim, size = n, prob = p_success, log = T))
r
mu^2 / (var - mu)
n = mu * (p_success / p_fail)
n
set.seed(123)
## generate nbinomial draw
n_sim = 100
phi = 100 # 0 implies poisson no overdispersion
mu = rlnorm(n_sim, log(5), 0.4)
var = mu + (mu^2/phi)
p_success = phi/(phi+mu)  ## probability of success in each trial.
p_fail = (var - mu) / var ## probability of failure in each trial.
head(cbind(p_success, p_fail, 1 - p_success))
##
r = mu^2 / (var - mu) ## number of failures until the experiment stops
n = mu * (p_success / p_fail)
summary(r)
summary(p_fail)
## simulates the number of failures which occur in a sequence of Bernoulli
## trials before a target number of successes is reached
y_sim = rnbinom(n_sim, size = phi, mu = mu)
## Calculate the densities the two ways
sum(dnbinom(y_sim, size = phi, mu = mu, log = T))
sum(dnbinom(y_sim, size = n, prob = p_success, log = T))
var
bookdown::render_book(input = "GitBook")
?render_book
bookdown::render_book(input = "GitBook", preview  = T)
bookdown::render_book(input = "GitBook", preview  = T, in_session = TRUE)
bookdown::render_book(input = "GitBook", , "bookdown::pdf_book")
bookdown::render_book(input = "GitBook", "bookdown::pdf_book")
bookdown::render_book(input = "GitBook", preview  = T, in_session = TRUE)
bookdown::render_book(input = "GitBook", preview  = T)
bookdown::render_book(input = "GitBook", preview  = T)
bookdown::render_book(input = "GitBook", preview  = T)
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
bookdown::render_book(input = "GitBook")
library(devtools)
document()
library(stockassessmenthelper)
catch_effort_data = readRDS(file = system.file("extdata", "estimate.out",
package = "stockassessmenthelper", mustWork = TRUE))
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
head(catch_effort_data)
head(catch_effort_data)
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = chat_df, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
table(catch_effort_data$catch > 50)
table(catch_effort_data$catch > 500000)
table(catch_effort_data$catch > 50000)
table(catch_effort_data$catch > 30000)
table(catch_effort_data$catch > 10000)
hist(catch_effort_data$catch)
detach("package:stockassessmenthelper", unload = TRUE)
library(stockassessmenthelper)
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove NA's from latitude and longitude
na_latlong_ndx = !is.na(catch_effort_data$longitude) | !is.na(catch_effort_data$latitude)
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", record = total_grooming_record, rule = "Lat Long NA")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "Lat Long NA", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "Lat Long NA", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, na_latlong_ndx)
## Remove NA's from latitude and lo
head(catch_effort_data)
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove NA's from latitude and longitude
na_latlong_ndx = !is.na(catch_effort_data$longitude) | !is.na(catch_effort_data$latitude)
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", record = total_grooming_record, rule = "Lat Long NA")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "Lat Long NA", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "Lat Long NA", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, na_latlong_ndx)
## Only look at Bottom Trawl data
method_BT_ndx =catch_effort_data$method == "BT"
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", record = total_grooming_record, rule = "method BT")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "method BT", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "method BT", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, method_BT_ndx)
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove NA's from latitude and longitude
na_latlong_ndx = !is.na(catch_effort_data$longitude) | !is.na(catch_effort_data$latitude)
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", record = total_grooming_record, rule = "Lat Long NA")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "Lat Long NA", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "Lat Long NA", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, na_latlong_ndx)
## Only look at Bottom Trawl data
method_BT_ndx =catch_effort_data$method == "BT"
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", record = total_grooming_record, rule = "method BT")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "method BT", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "method BT", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, method_BT_ndx)
## plot records
melt_total = melt(total_grooming_record, id.vars = "rule")
library(reshape2)
## plot records
melt_total = melt(total_grooming_record, id.vars = "rule")
library(ggplot2)
melt_total$rule = factor(melt_total$rule, ordered = T, levels = total_grooming_record$rule)
ggplot(melt_total %>% filter(variable %in%  c("catch")), aes(y = value /1000, x = rule, group = 1)) +
geom_line(size = 2, linetype = "dotted") +
geom_point(size = 4, aes(col = rule)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("Catch (000's t)") +
ylim(0,1600)
bookdown::render_book(input = "Gitbook")
bookdown::render_book(input = "Gitbook")
library(dplyr)
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx,
catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove NA's from latitude and longitude
na_latlong_ndx = !is.na(catch_effort_data$longitude) | !is.na(catch_effort_data$latitude)
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", record = total_grooming_record, rule = "Lat Long NA")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "Lat Long NA", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = na_latlong_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "Lat Long NA", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, na_latlong_ndx)
## Only look at Bottom Trawl data
method_BT_ndx =catch_effort_data$method == "BT"
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", record = total_grooming_record, rule = "method BT")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "method BT", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "method BT", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, method_BT_ndx)
## plot records
melt_total = melt(total_grooming_record, id.vars = "rule")
melt_total$rule = factor(melt_total$rule, ordered = T, levels = total_grooming_record$rule)
ggplot(melt_total %>% filter(variable %in%  c("catch")), aes(y = value /1000, x = rule, group = 1)) +
geom_line(size = 2, linetype = "dotted") +
geom_point(size = 4, aes(col = rule)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("Catch (000's t)") +
ylim(0,1600)
ggplot(melt_total %>% filter(variable %in%  c("events")), aes(y = value /1000, x = rule, group = 1)) +
geom_line(size = 2, linetype = "dotted") +
geom_point(size = 4, aes(col = rule)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("events (000's)") +
ylim(0,900) +
xlab("")
melt_total
total_grooming_record
table(na_latlong_ndx)
table(is.na(catch_effort_data$latitude) )
dim(catch_effort_data)
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx,
catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove NA's from latitude and longitude
table(is.na(catch_effort_data$latitude) )
head(catch_effort_data)
hist(catch_effort_data$bottom_depth)
hist(catch_effort_data$catch)
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx,
catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove unrealistic large catches (possible should consider imputing)
large_catch_ndx = catch_effort_data$catch > 40000
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", record = total_grooming_record, rule = "catch > 40 t")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "catch > 40 t", attribute = "cumulative_catch")
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx,
catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove unrealistic large catches (possible should consider imputing)
large_catch_ndx = catch_effort_data$catch > 40000
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", record = total_grooming_record, rule = "catch > 40 t")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "catch > 40 t", attribute = "cumulative_catch")
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx,
catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove unrealistic large catches (possible should consider imputing)
large_catch_ndx = catch_effort_data$catch > 40000
# record the rule
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", record = total_grooming_record, rule = "catch > 40 t")
?apply_grooming_rule
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx,
catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove unrealistic large catches (possible should consider imputing)
large_catch_ndx = catch_effort_data$catch < 40000
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", record = total_grooming_record, rule = "catch > 40 t")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "catch > 40 t", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "catch > 40 t", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, large_catch_ndx)
catch_effort_data
large_catch_ndx
length(large_catch_ndx)
sum(large_catch_ndx)
catch_effort_data = readRDS(file = system.file("extdata", "simulated_data.RDS",
package = "stockassessmenthelper", mustWork = TRUE))
# look at the data
# head(catch_effort_data)
## start grooming record
start_records = nrow(catch_effort_data)
## these are records to save the effects of grooming rules
start_ndx = rep(T, nrow(catch_effort_data))
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = start_ndx,
catch.col = "catch", record = NULL, rule = "Init")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = start_ndx, catch.col = "catch",
year.col = "fish_year", record = NULL, rule = "Init", attribute = "cumulative_events")
## Remove unrealistic large catches (possible should consider imputing)
large_catch_ndx = catch_effort_data$catch < 40000
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", record = total_grooming_record, rule = "catch > 40 t")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "catch > 40 t", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = large_catch_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "catch > 40 t", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, large_catch_ndx)
dim(catch_effort_data)
## Only look at Bottom Trawl data
method_BT_ndx =catch_effort_data$method == "BT"
# record the rule
total_grooming_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", record = total_grooming_record, rule = "method BT")
yearly_catch_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_catch_record,
rule = "method BT", attribute = "cumulative_catch")
yearly_event_record = record_grooming_rule(df = catch_effort_data, index = method_BT_ndx,
catch.col = "catch", year.col = "fish_year", record = yearly_event_record,
rule = "method BT", attribute = "cumulative_events")
# apply the rule to the data set
catch_effort_data = apply_grooming_rule(catch_effort_data, method_BT_ndx)
## plot records
melt_total = melt(total_grooming_record, id.vars = "rule")
melt_total$rule = factor(melt_total$rule, ordered = T, levels = total_grooming_record$rule)
ggplot(melt_total %>% filter(variable %in%  c("catch")), aes(y = value /1000, x = rule, group = 1)) +
geom_line(size = 2, linetype = "dotted") +
geom_point(size = 4, aes(col = rule)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("Catch (000's t)") +
ylim(0,1600)
melt_total
melt_total
## plot records
melt_total = melt(total_grooming_record, id.vars = "rule")
melt_total$rule = factor(melt_total$rule, ordered = T, levels = total_grooming_record$rule)
ggplot(melt_total %>% filter(variable %in%  c("catch")), aes(y = value /1000, x = rule, group = 1)) +
geom_line(size = 2, linetype = "dotted") +
geom_point(size = 4, aes(col = rule)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("Catch (000's t)")
ggplot(melt_total %>% filter(variable %in%  c("catch")), aes(y = value /1000, x = rule, group = 1)) +
geom_line(size = 2, linetype = "dotted") +
geom_point(size = 4, aes(col = rule)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("Catch (000's t)") +
ylim(0,NA)
ggplot(melt_total %>% filter(variable %in%  c("events")), aes(y = value /1000, x = rule, group = 1)) +
geom_line(size = 2, linetype = "dotted") +
geom_point(size = 4, aes(col = rule)) +
theme(axis.text.x = element_text(angle = 90)) +
ylab("events (000's)") +
xlab("") +
ylim(0,NA)
?library
library(stockassessmenthelper)
packageVersion("stockassessmenthelper")
library(dplyr, warn.conflicts = F)
library(tidyr, warn.conflicts = F)
library(reshape2, warn.conflicts = F)
library(ggplot2, warn.conflicts = F)
